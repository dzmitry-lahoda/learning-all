<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MatrixExtensions</name>
    </assembly>
    <members>
        <member name="T:MatrixExtensions.Operations.LongIntArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.LongIntArray2DOperationsExtensions.Add(System.Int64[0:,0:],System.Int32[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongIntArray2DOperationsExtensions.Substract(System.Int64[0:,0:],System.Int32[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongIntArray2DOperationsExtensions.PointwiseMultiply(System.Int64[0:,0:],System.Int32[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongIntArray2DOperationsExtensions.Multiply(System.Int64[0:,0:],System.Int32[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongIntArray2DOperationsExtensions.Multiply(System.Int64[0:,0:],System.Int32[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.IntIntArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DOperationsExtensions.Add(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DOperationsExtensions.Substract(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DOperationsExtensions.PointwiseMultiply(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DOperationsExtensions.Multiply(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DOperationsExtensions.Multiply(System.Int32[0:,0:],System.Int32[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.FloatIntArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatIntArray2DOperationsExtensions.Add(System.Single[0:,0:],System.Int32[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatIntArray2DOperationsExtensions.Substract(System.Single[0:,0:],System.Int32[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatIntArray2DOperationsExtensions.PointwiseMultiply(System.Single[0:,0:],System.Int32[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatIntArray2DOperationsExtensions.Multiply(System.Single[0:,0:],System.Int32[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatIntArray2DOperationsExtensions.Multiply(System.Single[0:,0:],System.Int32[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DecimalDecimalArraySimpleOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArraySimpleOperationsExtensions.MaxPosition(System.Decimal[])">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <param name="vector"></param>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArraySimpleOperationsExtensions.Add(System.Decimal[],System.Decimal)">
            <summary>
            Adds a scalar to each element of the vector.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to add.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArraySimpleOperationsExtensions.Substract(System.Decimal[],System.Decimal)">
            <summary>
            Substracts a scalar from each element of the vector.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to substruct.</param>
            <returns>The vector which stores the result of the substruction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArraySimpleOperationsExtensions.Negate(System.Decimal[])">
            <summary>
            Negates each element of the vector.
            </summary>
            <returns>A vector containing the negated values.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArraySimpleOperationsExtensions.PointwiseMultiply(System.Decimal[],System.Decimal)">
            <summary>
            Multiplies a vector with a scalar and returns the result.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to multiply the vector by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArraySimpleOperationsExtensions.DivideEachElement(System.Decimal[],System.Decimal)">
            <summary>
            Divides each element of current vector by a scalar and returns the result.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to divide the vector by.</param>
            <returns>The vecotr with result of the division.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.LongFloatArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongFloatArrayManipulationExtensions.Append(System.Int64[],System.Single[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongFloatArrayManipulationExtensions.Stack(System.Int64[],System.Single[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongFloatArrayManipulationExtensions.Append(System.Int64[],System.Single[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongFloatArrayManipulationExtensions.Stack(System.Int64[],System.Single[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.IntIntArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntIntArray2DManipulationExtensions.Append(System.Int32[0:,0:],System.Int32[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntIntArray2DManipulationExtensions.Append(System.Int32[0:,0:],System.Int32[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntIntArray2DManipulationExtensions.Stack(System.Int32[0:,0:],System.Int32[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntIntArray2DManipulationExtensions.Stack(System.Int32[0:,0:],System.Int32[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.FloatIntArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatIntArray2DManipulationExtensions.Append(System.Single[0:,0:],System.Int32[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatIntArray2DManipulationExtensions.Append(System.Single[0:,0:],System.Int32[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatIntArray2DManipulationExtensions.Stack(System.Single[0:,0:],System.Int32[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatIntArray2DManipulationExtensions.Stack(System.Single[0:,0:],System.Int32[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Generic.GenericArray2DExtensions">
            <summary>
            Provides generic extension methods for 2D arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Generic.GenericArray2DExtensions.IsEmpty``1(``0[0:,0:])">
            <summary>
            Retruns true if matrix is empty.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:MatrixExtensions.Generic.GenericArray2DExtensions.RowCount``1(``0[0:,0:])">
            <summary>
            Gets number of columns in 2D array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:MatrixExtensions.Generic.GenericArray2DExtensions.ColumnCount``1(``0[0:,0:])">
            <summary>
            Gets number of rows in 2D array.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="M:MatrixExtensions.Generic.GenericArray2DExtensions.GetRow``1(``0[0:,0:],System.Int32)">
            <summary>
            Copies a row into a new vector.
            </summary>
            <param name="matrix"></param>
            <param name="rowIndex0">The row to copy.</param>
            <returns>A vector containing the copied elements.</returns>
        </member>
        <member name="M:MatrixExtensions.Generic.GenericArray2DExtensions.GetColumn``1(``0[0:,0:],System.Int32)">
            <summary>
            Copies a column  of matrix into a new vector.
            </summary>
            <param name="matrix"></param>
            <param name="columnIndex0">The column to copy.</param>
            <returns>A vector containing the copied elements.</returns>
        </member>
        <member name="M:MatrixExtensions.Generic.GenericArray2DExtensions.GetLastColumn``1(``0[0:,0:])">
            <summary>
            Copies last column of matrix into a new vector.
            </summary>
            <param name="matrix"></param>
            <returns>A vector containing copied elements.</returns>
        </member>
        <member name="M:MatrixExtensions.Generic.GenericArray2DExtensions.GetSubMatrix``1(``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a matrix that contains the values from the requested sub-matrix.
            </summary>
            <param name="rowIndex0">The row to start copying from.</param>
            <param name="rowLength">The number of rows to copy. Must be positive.</param>
            <param name="columnIndex0">The column to start copying from.</param>
            <param name="columnLength">The number of columns to copy. Must be positive.</param>
        </member>
        <member name="M:MatrixExtensions.Generic.GenericArray2DExtensions.GetRowEnumeration``1(``0[0:,0:])">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that enumerates over the matrix rows.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that enumerates over the matrix rows</returns>
        </member>
        <member name="M:MatrixExtensions.Generic.GenericArray2DExtensions.GetColumnEnumeration``1(``0[0:,0:])">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that enumerates over the matrix columns.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that enumerates over the matrix columns</returns>
        </member>
        <member name="M:MatrixExtensions.Generic.GenericArray2DExtensions.ToListOfLists``1(``0[0:,0:])">
            <summary>
            Returns list of lists with elements of <paramref name="matrix"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="matrix">Matrix to translate into list of lists.</param>
            <returns>New list of list with elements from matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Explicit.FloatIntExplicitConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion with lost of precision or data range.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.FloatIntExplicitConversionExtensions.ToInt(System.Single[])">
            <summary>
            Converts vector of one numerical type to other with lost of data.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.FloatIntExplicitConversionExtensions.ToInt(System.Single[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other with lost of data.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DoubleLongArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleLongArrayOperationsExtensions.Add(System.Double[],System.Int64[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleLongArrayOperationsExtensions.Substract(System.Double[],System.Int64[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleLongArrayOperationsExtensions.PointwiseMultiply(System.Double[],System.Int64[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DoubleIntArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleIntArray2DOperationsExtensions.Add(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleIntArray2DOperationsExtensions.Substract(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleIntArray2DOperationsExtensions.PointwiseMultiply(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleIntArray2DOperationsExtensions.Multiply(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleIntArray2DOperationsExtensions.Multiply(System.Double[0:,0:],System.Int32[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DecimalDecimalArray2DSimpleOperationsExtensions">
             <summary>
            Provides extension methods for 2D numeric arrays.
             </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DSimpleOperationsExtensions.MaxPosition(System.Decimal[0:,0:])">
            <summary>
            Returns the indeces of the absolute maximum element.
            </summary>
            <param name="matrix"></param>
            <returns>The array with 2 indeces of absolute maximum element.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DSimpleOperationsExtensions.Add(System.Decimal[0:,0:],System.Decimal)">
            <summary>
            Adds a scalar to each element in the matrix and places the results into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to add.</param>
            <returns>The matrix which stores results of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DSimpleOperationsExtensions.Substract(System.Decimal[0:,0:],System.Decimal)">
            <summary>
            Substracts a scalar from each element of the matrix.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to substruct.</param>
            <returns>The matrix which stores the result of the substruction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DSimpleOperationsExtensions.Negate(System.Decimal[0:,0:])">
            <summary>
            Negates each element of the matrix.
            </summary>
            <returns>The new matrix which stores result of negation.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DSimpleOperationsExtensions.PointwiseMultiply(System.Decimal[0:,0:],System.Decimal)">
            <summary>
            Multiplies each element of this matrix with a scalar.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to multiply with.</param>
            <returns>The multiplied matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DSimpleOperationsExtensions.DivideEachElement(System.Decimal[0:,0:],System.Decimal)">
            <summary>
            Divides each element of current matrix by a scalar and returns the result.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to divide the matrix by.</param>
            <returns>The matrix with result of the division.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DSimpleOperationsExtensions.SumPerColumn(System.Decimal[0:,0:])">
            <summary>
            Finds sum of all elemtens in each matrix column.
            </summary>
            <param name="matrix"></param>
            <returns>The vector which contains sums.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DSimpleOperationsExtensions.SumPerRow(System.Decimal[0:,0:])">
            <summary>
            Finds sum of all elemtens in each matrix row.
            </summary>
            <param name="matrix"></param>
            <returns>The vector which contains sums.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DecimalDecimalArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DOperationsExtensions.Add(System.Decimal[0:,0:],System.Decimal[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DOperationsExtensions.Substract(System.Decimal[0:,0:],System.Decimal[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DOperationsExtensions.PointwiseMultiply(System.Decimal[0:,0:],System.Decimal[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DOperationsExtensions.Multiply(System.Decimal[0:,0:],System.Decimal[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArray2DOperationsExtensions.Multiply(System.Decimal[0:,0:],System.Decimal[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.IntDecimalArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntDecimalArrayManipulationExtensions.Append(System.Int32[],System.Decimal[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntDecimalArrayManipulationExtensions.Stack(System.Int32[],System.Decimal[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntDecimalArrayManipulationExtensions.Append(System.Int32[],System.Decimal[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntDecimalArrayManipulationExtensions.Stack(System.Int32[],System.Decimal[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DoubleIntArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleIntArrayManipulationExtensions.Append(System.Double[],System.Int32[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleIntArrayManipulationExtensions.Stack(System.Double[],System.Int32[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleIntArrayManipulationExtensions.Append(System.Double[],System.Int32[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleIntArrayManipulationExtensions.Stack(System.Double[],System.Int32[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.LongIntConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.LongIntConversionExtensions.ToLong(System.Int32[])">
            <summary>
            Converts vector of one numerical type to other.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.LongIntConversionExtensions.ToLong(System.Int32[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Explicit.DoubleFloatExplicitConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion with lost of precision or data range.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DoubleFloatExplicitConversionExtensions.ToFloat(System.Double[])">
            <summary>
            Converts vector of one numerical type to other with lost of data.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DoubleFloatExplicitConversionExtensions.ToFloat(System.Double[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other with lost of data.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.FloatLongArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatLongArrayOperationsExtensions.Add(System.Single[],System.Int64[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatLongArrayOperationsExtensions.Substract(System.Single[],System.Int64[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatLongArrayOperationsExtensions.PointwiseMultiply(System.Single[],System.Int64[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DoubleLongArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleLongArray2DOperationsExtensions.Add(System.Double[0:,0:],System.Int64[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleLongArray2DOperationsExtensions.Substract(System.Double[0:,0:],System.Int64[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleLongArray2DOperationsExtensions.PointwiseMultiply(System.Double[0:,0:],System.Int64[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleLongArray2DOperationsExtensions.Multiply(System.Double[0:,0:],System.Int64[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleLongArray2DOperationsExtensions.Multiply(System.Double[0:,0:],System.Int64[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DoubleFloatArraySimpleOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArraySimpleOperationsExtensions.MaxPosition(System.Double[])">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <param name="vector"></param>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArraySimpleOperationsExtensions.Add(System.Double[],System.Double)">
            <summary>
            Adds a scalar to each element of the vector.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to add.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArraySimpleOperationsExtensions.Substract(System.Double[],System.Double)">
            <summary>
            Substracts a scalar from each element of the vector.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to substruct.</param>
            <returns>The vector which stores the result of the substruction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArraySimpleOperationsExtensions.Negate(System.Double[])">
            <summary>
            Negates each element of the vector.
            </summary>
            <returns>A vector containing the negated values.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArraySimpleOperationsExtensions.PointwiseMultiply(System.Double[],System.Double)">
            <summary>
            Multiplies a vector with a scalar and returns the result.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to multiply the vector by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArraySimpleOperationsExtensions.DivideEachElement(System.Double[],System.Double)">
            <summary>
            Divides each element of current vector by a scalar and returns the result.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to divide the vector by.</param>
            <returns>The vecotr with result of the division.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.LongDoubleArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongDoubleArrayManipulationExtensions.Append(System.Int64[],System.Double[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongDoubleArrayManipulationExtensions.Stack(System.Int64[],System.Double[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongDoubleArrayManipulationExtensions.Append(System.Int64[],System.Double[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongDoubleArrayManipulationExtensions.Stack(System.Int64[],System.Double[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.LongDecimalArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongDecimalArrayManipulationExtensions.Append(System.Int64[],System.Decimal[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongDecimalArrayManipulationExtensions.Stack(System.Int64[],System.Decimal[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongDecimalArrayManipulationExtensions.Append(System.Int64[],System.Decimal[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongDecimalArrayManipulationExtensions.Stack(System.Int64[],System.Decimal[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.IntIntArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntIntArrayManipulationExtensions.Append(System.Int32[],System.Int32[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntIntArrayManipulationExtensions.Stack(System.Int32[],System.Int32[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntIntArrayManipulationExtensions.Append(System.Int32[],System.Int32[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntIntArrayManipulationExtensions.Stack(System.Int32[],System.Int32[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.Generic.GenericArrayManipulationExtensions">
            <summary>
            Provides generic extension methods for 1D arrays manipulation.
            </summary>
            <seealso href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/circshift.html"/>
            <seealso href="http://www.mathworks.com/access/helpdesk/help/techdoc/ref/shiftdim.html"/>
        </member>
        <member name="M:MatrixExtensions.Manipulation.Generic.GenericArrayManipulationExtensions.Shift``1(``0[],System.Int32)">
            <summary>
            Gets new array shifted by count to the right if count>0,
            otherwise to the left.
            Empty elements are fullfilled with default values.
            </summary>
            <typeparam name="T">Type with default constructot.</typeparam>
            <param name="vector"></param>
            <param name="count">Length of shift.</param>
            <returns>The vector which stores shifted elements of the original vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.Generic.GenericArrayManipulationExtensions.CircularShift``1(``0[],System.Int32)">
            <summary>
            Gets new array shifted by count to the right if count>0,
            otherwise to the left.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="vector"></param>
            <param name="count">Length of shift.</param>
            <returns>The vector which stores shifted elements of the original vector.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DecimalDecimalArray2DSimpleManipulationExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays manupulation.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalDecimalArray2DSimpleManipulationExtensions.ToColumnWiseArray(System.Decimal[0:,0:])">
            <summary>
            Returns the matrix's elements as an vector with the data laid out column-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 4, 7, 2, 5, 8, 3, 6, 9
            7, 8, 9
            </pre></example>
            <returns>The new vector containing the matrix's elements.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalDecimalArray2DSimpleManipulationExtensions.ToRowWiseArray(System.Decimal[0:,0:])">
            <summary>
            Returns the matrix's elements as an vector with the data laid row-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 2, 3, 4, 5, 6, 7, 8, 9
            7, 8, 9
            </pre></example>
            <returns>The new vector containing the matrix's elements.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Generic.GenericArray2DConversionExtensions">
            <summary>
            Provides generic extension methods for 2D arrays conversion.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Generic.GenericArray2DConversionExtensions.ToJagged``1(``0[0:,0:])">
            <summary>
            Converts 2D array to jagged 2D matrix.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="matrix"></param>
            <returns></returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.DoubleIntConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.DoubleIntConversionExtensions.ToDouble(System.Int32[])">
            <summary>
            Converts vector of one numerical type to other.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.DoubleIntConversionExtensions.ToDouble(System.Int32[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.LongLongArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArrayOperationsExtensions.Add(System.Int64[],System.Int64[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArrayOperationsExtensions.Substract(System.Int64[],System.Int64[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArrayOperationsExtensions.PointwiseMultiply(System.Int64[],System.Int64[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DoubleDoubleArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleDoubleArrayOperationsExtensions.Add(System.Double[],System.Double[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleDoubleArrayOperationsExtensions.Substract(System.Double[],System.Double[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleDoubleArrayOperationsExtensions.PointwiseMultiply(System.Double[],System.Double[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.LongLongArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongLongArrayManipulationExtensions.Append(System.Int64[],System.Int64[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongLongArrayManipulationExtensions.Stack(System.Int64[],System.Int64[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongLongArrayManipulationExtensions.Append(System.Int64[],System.Int64[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongLongArrayManipulationExtensions.Stack(System.Int64[],System.Int64[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.LongIntArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongIntArray2DManipulationExtensions.Append(System.Int64[0:,0:],System.Int32[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongIntArray2DManipulationExtensions.Append(System.Int64[0:,0:],System.Int32[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongIntArray2DManipulationExtensions.Stack(System.Int64[0:,0:],System.Int32[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongIntArray2DManipulationExtensions.Stack(System.Int64[0:,0:],System.Int32[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Equality.GenericArrayEqualityExtensions">
            <summary>
            Provides extension methods for numeric arrays related to equality checking.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Equality.GenericArrayEqualityExtensions.EqualsElements``2(``0[],``1[])">
            <summary>
            Determines whether the specified vector elements are 
            pairwise equal to current vector's elements.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="vector"></param>
            <param name="other">The vector to compare.</param>
            <returns>True, if all correspondent elements are equal;otherwise, false.</returns>
        </member>
        <member name="M:MatrixExtensions.Equality.GenericArrayEqualityExtensions.EqualsElements``2(``0[],``1[],System.Func{``0,``1,System.Boolean})">
            <summary>
            Determines whether the specified vector elements are 
            pairwise equal to current vector's elements.
            Vector elements considered equal if <see cref="T:System.Func`3"/>
            invocation returns true. 
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="vector"></param>
            <param name="other">The vector to compare.</param>
            <param name="equals">The delegate which checks elements for equality.</param>
            <returns>True, if all correspondent elements are equal;otherwise, false.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Explicit.DecimalIntExplicitConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion with lost of precision or data range.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DecimalIntExplicitConversionExtensions.ToInt(System.Decimal[])">
            <summary>
            Converts vector of one numerical type to other with lost of data.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DecimalIntExplicitConversionExtensions.ToInt(System.Decimal[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other with lost of data.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DecimalIntArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalIntArray2DOperationsExtensions.Add(System.Decimal[0:,0:],System.Int32[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalIntArray2DOperationsExtensions.Substract(System.Decimal[0:,0:],System.Int32[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalIntArray2DOperationsExtensions.PointwiseMultiply(System.Decimal[0:,0:],System.Int32[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalIntArray2DOperationsExtensions.Multiply(System.Decimal[0:,0:],System.Int32[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalIntArray2DOperationsExtensions.Multiply(System.Decimal[0:,0:],System.Int32[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.LongLongArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongLongArray2DManipulationExtensions.Append(System.Int64[0:,0:],System.Int64[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongLongArray2DManipulationExtensions.Append(System.Int64[0:,0:],System.Int64[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongLongArray2DManipulationExtensions.Stack(System.Int64[0:,0:],System.Int64[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongLongArray2DManipulationExtensions.Stack(System.Int64[0:,0:],System.Int64[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.FloatFloatArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatFloatArray2DManipulationExtensions.Append(System.Single[0:,0:],System.Single[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatFloatArray2DManipulationExtensions.Append(System.Single[0:,0:],System.Single[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatFloatArray2DManipulationExtensions.Stack(System.Single[0:,0:],System.Single[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatFloatArray2DManipulationExtensions.Stack(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Explicit.DoubleLongExplicitConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion with lost of precision or data range.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DoubleLongExplicitConversionExtensions.ToLong(System.Double[])">
            <summary>
            Converts vector of one numerical type to other with lost of data.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DoubleLongExplicitConversionExtensions.ToLong(System.Double[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other with lost of data.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.LongIntArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.LongIntArrayOperationsExtensions.Add(System.Int64[],System.Int32[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongIntArrayOperationsExtensions.Substract(System.Int64[],System.Int32[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongIntArrayOperationsExtensions.PointwiseMultiply(System.Int64[],System.Int32[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.IntIntArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArrayOperationsExtensions.Add(System.Int32[],System.Int32[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArrayOperationsExtensions.Substract(System.Int32[],System.Int32[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArrayOperationsExtensions.PointwiseMultiply(System.Int32[],System.Int32[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DecimalIntArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalIntArray2DManipulationExtensions.Append(System.Decimal[0:,0:],System.Int32[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalIntArray2DManipulationExtensions.Append(System.Decimal[0:,0:],System.Int32[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalIntArray2DManipulationExtensions.Stack(System.Decimal[0:,0:],System.Int32[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalIntArray2DManipulationExtensions.Stack(System.Decimal[0:,0:],System.Int32[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Generic.Specialized.GenericArrayFuncConversionExtensions">
            <summary>
            Provides generic extension methods for 1D arrays wich accept <see cref="T:System.Func`2"/>.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Generic.Specialized.GenericArrayFuncConversionExtensions.ToOther``2(``0[],System.Func{``0,``1})">
            <summary>
            Converts vector's elements to other using conversion function.
            </summary>
            <typeparam name="T">Source type.</typeparam>
            <typeparam name="TResult">Destination type.</typeparam>
            <param name="vector"></param>
            <param name="converter">Conversion function.</param>
            <returns>The vector which stores the result of the conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Generic.Specialized.GenericArrayFuncConversionExtensions.ToOther``2(``0[],System.Func{``0,System.Int32,``1})">
             <summary>
            Converts vector's elements to other using conversion function.
             Second parameter of convertion function loop's index.
             </summary>
             <typeparam name="T">Source type.</typeparam>
             <typeparam name="TResult">Destination type.</typeparam>
             <param name="vector"></param>
             <param name="converter">Conversion function.
             First argument is loop iteration index.</param>
             <returns>The vector which stores the result of the conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Explicit.FloatLongExplicitConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion with lost of precision or data range.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.FloatLongExplicitConversionExtensions.ToLong(System.Single[])">
            <summary>
            Converts vector of one numerical type to other with lost of data.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.FloatLongExplicitConversionExtensions.ToLong(System.Single[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other with lost of data.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.DoubleLongConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.DoubleLongConversionExtensions.ToDouble(System.Int64[])">
            <summary>
            Converts vector of one numerical type to other.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.DoubleLongConversionExtensions.ToDouble(System.Int64[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.LongLongArraySimpleOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArraySimpleOperationsExtensions.MaxPosition(System.Int64[])">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <param name="vector"></param>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArraySimpleOperationsExtensions.Add(System.Int64[],System.Int64)">
            <summary>
            Adds a scalar to each element of the vector.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to add.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArraySimpleOperationsExtensions.Substract(System.Int64[],System.Int64)">
            <summary>
            Substracts a scalar from each element of the vector.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to substruct.</param>
            <returns>The vector which stores the result of the substruction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArraySimpleOperationsExtensions.Negate(System.Int64[])">
            <summary>
            Negates each element of the vector.
            </summary>
            <returns>A vector containing the negated values.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArraySimpleOperationsExtensions.PointwiseMultiply(System.Int64[],System.Int64)">
            <summary>
            Multiplies a vector with a scalar and returns the result.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to multiply the vector by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArraySimpleOperationsExtensions.DivideEachElement(System.Int64[],System.Int64)">
            <summary>
            Divides each element of current vector by a scalar and returns the result.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to divide the vector by.</param>
            <returns>The vecotr with result of the division.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.FloatFloatArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DOperationsExtensions.Add(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DOperationsExtensions.Substract(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DOperationsExtensions.PointwiseMultiply(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DOperationsExtensions.Multiply(System.Single[0:,0:],System.Single[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DOperationsExtensions.Multiply(System.Single[0:,0:],System.Single[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DoubleFloatArray2DSimpleOperationsExtensions">
             <summary>
            Provides extension methods for 2D numeric arrays.
             </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DSimpleOperationsExtensions.MaxPosition(System.Double[0:,0:])">
            <summary>
            Returns the indeces of the absolute maximum element.
            </summary>
            <param name="matrix"></param>
            <returns>The array with 2 indeces of absolute maximum element.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DSimpleOperationsExtensions.Add(System.Double[0:,0:],System.Double)">
            <summary>
            Adds a scalar to each element in the matrix and places the results into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to add.</param>
            <returns>The matrix which stores results of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DSimpleOperationsExtensions.Substract(System.Double[0:,0:],System.Double)">
            <summary>
            Substracts a scalar from each element of the matrix.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to substruct.</param>
            <returns>The matrix which stores the result of the substruction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DSimpleOperationsExtensions.Negate(System.Double[0:,0:])">
            <summary>
            Negates each element of the matrix.
            </summary>
            <returns>The new matrix which stores result of negation.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DSimpleOperationsExtensions.PointwiseMultiply(System.Double[0:,0:],System.Double)">
            <summary>
            Multiplies each element of this matrix with a scalar.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to multiply with.</param>
            <returns>The multiplied matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DSimpleOperationsExtensions.DivideEachElement(System.Double[0:,0:],System.Double)">
            <summary>
            Divides each element of current matrix by a scalar and returns the result.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to divide the matrix by.</param>
            <returns>The matrix with result of the division.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DSimpleOperationsExtensions.SumPerColumn(System.Double[0:,0:])">
            <summary>
            Finds sum of all elemtens in each matrix column.
            </summary>
            <param name="matrix"></param>
            <returns>The vector which contains sums.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DSimpleOperationsExtensions.SumPerRow(System.Double[0:,0:])">
            <summary>
            Finds sum of all elemtens in each matrix row.
            </summary>
            <param name="matrix"></param>
            <returns>The vector which contains sums.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.FloatIntConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.FloatIntConversionExtensions.ToFloat(System.Int32[])">
            <summary>
            Converts vector of one numerical type to other.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.FloatIntConversionExtensions.ToFloat(System.Int32[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.DoubleFloatConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.DoubleFloatConversionExtensions.ToDouble(System.Single[])">
            <summary>
            Converts vector of one numerical type to other.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.DoubleFloatConversionExtensions.ToDouble(System.Single[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.LongLongArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DOperationsExtensions.Add(System.Int64[0:,0:],System.Int64[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DOperationsExtensions.Substract(System.Int64[0:,0:],System.Int64[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DOperationsExtensions.PointwiseMultiply(System.Int64[0:,0:],System.Int64[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DOperationsExtensions.Multiply(System.Int64[0:,0:],System.Int64[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DOperationsExtensions.Multiply(System.Int64[0:,0:],System.Int64[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.IntDoubleArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntDoubleArrayManipulationExtensions.Append(System.Int32[],System.Double[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntDoubleArrayManipulationExtensions.Stack(System.Int32[],System.Double[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntDoubleArrayManipulationExtensions.Append(System.Int32[],System.Double[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntDoubleArrayManipulationExtensions.Stack(System.Int32[],System.Double[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DoubleDoubleArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleDoubleArray2DOperationsExtensions.Add(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleDoubleArray2DOperationsExtensions.Substract(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleDoubleArray2DOperationsExtensions.PointwiseMultiply(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleDoubleArray2DOperationsExtensions.Multiply(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleDoubleArray2DOperationsExtensions.Multiply(System.Double[0:,0:],System.Double[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DecimalLongArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalLongArrayOperationsExtensions.Add(System.Decimal[],System.Int64[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalLongArrayOperationsExtensions.Substract(System.Decimal[],System.Int64[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalLongArrayOperationsExtensions.PointwiseMultiply(System.Decimal[],System.Int64[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DecimalDecimalArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalDecimalArrayManipulationExtensions.Append(System.Decimal[],System.Decimal[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalDecimalArrayManipulationExtensions.Stack(System.Decimal[],System.Decimal[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalDecimalArrayManipulationExtensions.Append(System.Decimal[],System.Decimal[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalDecimalArrayManipulationExtensions.Stack(System.Decimal[],System.Decimal[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DecimalDecimalArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalDecimalArray2DManipulationExtensions.Append(System.Decimal[0:,0:],System.Decimal[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalDecimalArray2DManipulationExtensions.Append(System.Decimal[0:,0:],System.Decimal[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalDecimalArray2DManipulationExtensions.Stack(System.Decimal[0:,0:],System.Decimal[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalDecimalArray2DManipulationExtensions.Stack(System.Decimal[0:,0:],System.Decimal[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Explicit.LongIntExplicitConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion with lost of precision or data range.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.LongIntExplicitConversionExtensions.ToInt(System.Int64[])">
            <summary>
            Converts vector of one numerical type to other with lost of data.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.LongIntExplicitConversionExtensions.ToInt(System.Int64[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other with lost of data.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Explicit.DecimalFloatExplicitConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion with lost of precision or data range.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DecimalFloatExplicitConversionExtensions.ToFloat(System.Decimal[])">
            <summary>
            Converts vector of one numerical type to other with lost of data.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DecimalFloatExplicitConversionExtensions.ToFloat(System.Decimal[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other with lost of data.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.FloatFloatArraySimpleOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArraySimpleOperationsExtensions.MaxPosition(System.Single[])">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <param name="vector"></param>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArraySimpleOperationsExtensions.Add(System.Single[],System.Single)">
            <summary>
            Adds a scalar to each element of the vector.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to add.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArraySimpleOperationsExtensions.Substract(System.Single[],System.Single)">
            <summary>
            Substracts a scalar from each element of the vector.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to substruct.</param>
            <returns>The vector which stores the result of the substruction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArraySimpleOperationsExtensions.Negate(System.Single[])">
            <summary>
            Negates each element of the vector.
            </summary>
            <returns>A vector containing the negated values.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArraySimpleOperationsExtensions.PointwiseMultiply(System.Single[],System.Single)">
            <summary>
            Multiplies a vector with a scalar and returns the result.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to multiply the vector by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArraySimpleOperationsExtensions.DivideEachElement(System.Single[],System.Single)">
            <summary>
            Divides each element of current vector by a scalar and returns the result.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to divide the vector by.</param>
            <returns>The vecotr with result of the division.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DoubleFloatArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DOperationsExtensions.Add(System.Double[0:,0:],System.Single[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DOperationsExtensions.Substract(System.Double[0:,0:],System.Single[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DOperationsExtensions.PointwiseMultiply(System.Double[0:,0:],System.Single[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DOperationsExtensions.Multiply(System.Double[0:,0:],System.Single[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArray2DOperationsExtensions.Multiply(System.Double[0:,0:],System.Single[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DoubleDoubleArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleDoubleArrayManipulationExtensions.Append(System.Double[],System.Double[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleDoubleArrayManipulationExtensions.Stack(System.Double[],System.Double[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleDoubleArrayManipulationExtensions.Append(System.Double[],System.Double[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleDoubleArrayManipulationExtensions.Stack(System.Double[],System.Double[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DecimalLongArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalLongArray2DManipulationExtensions.Append(System.Decimal[0:,0:],System.Int64[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalLongArray2DManipulationExtensions.Append(System.Decimal[0:,0:],System.Int64[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalLongArray2DManipulationExtensions.Stack(System.Decimal[0:,0:],System.Int64[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalLongArray2DManipulationExtensions.Stack(System.Decimal[0:,0:],System.Int64[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.DecimalIntConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.DecimalIntConversionExtensions.ToDecimal(System.Int32[])">
            <summary>
            Converts vector of one numerical type to other.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.DecimalIntConversionExtensions.ToDecimal(System.Int32[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DoubleLongArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleLongArrayManipulationExtensions.Append(System.Double[],System.Int64[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleLongArrayManipulationExtensions.Stack(System.Double[],System.Int64[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleLongArrayManipulationExtensions.Append(System.Double[],System.Int64[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleLongArrayManipulationExtensions.Stack(System.Double[],System.Int64[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DoubleDoubleArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleDoubleArray2DManipulationExtensions.Append(System.Double[0:,0:],System.Double[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleDoubleArray2DManipulationExtensions.Append(System.Double[0:,0:],System.Double[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleDoubleArray2DManipulationExtensions.Stack(System.Double[0:,0:],System.Double[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleDoubleArray2DManipulationExtensions.Stack(System.Double[0:,0:],System.Double[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.IntIntArraySimpleOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArraySimpleOperationsExtensions.MaxPosition(System.Int32[])">
            <summary>
            Returns the index of the absolute maximum element.
            </summary>
            <param name="vector"></param>
            <returns>The index of absolute maximum element.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArraySimpleOperationsExtensions.Add(System.Int32[],System.Int32)">
            <summary>
            Adds a scalar to each element of the vector.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to add.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArraySimpleOperationsExtensions.Substract(System.Int32[],System.Int32)">
            <summary>
            Substracts a scalar from each element of the vector.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to substruct.</param>
            <returns>The vector which stores the result of the substruction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArraySimpleOperationsExtensions.Negate(System.Int32[])">
            <summary>
            Negates each element of the vector.
            </summary>
            <returns>A vector containing the negated values.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArraySimpleOperationsExtensions.PointwiseMultiply(System.Int32[],System.Int32)">
            <summary>
            Multiplies a vector with a scalar and returns the result.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to multiply the vector by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArraySimpleOperationsExtensions.DivideEachElement(System.Int32[],System.Int32)">
            <summary>
            Divides each element of current vector by a scalar and returns the result.
            </summary>
            <param name="vector"></param>
            <param name="scalar">The scalar to divide the vector by.</param>
            <returns>The vecotr with result of the division.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.FloatLongArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatLongArray2DOperationsExtensions.Add(System.Single[0:,0:],System.Int64[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatLongArray2DOperationsExtensions.Substract(System.Single[0:,0:],System.Int64[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatLongArray2DOperationsExtensions.PointwiseMultiply(System.Single[0:,0:],System.Int64[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatLongArray2DOperationsExtensions.Multiply(System.Single[0:,0:],System.Int64[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatLongArray2DOperationsExtensions.Multiply(System.Single[0:,0:],System.Int64[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.LongIntArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongIntArrayManipulationExtensions.Append(System.Int64[],System.Int32[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongIntArrayManipulationExtensions.Stack(System.Int64[],System.Int32[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongIntArrayManipulationExtensions.Append(System.Int64[],System.Int32[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongIntArrayManipulationExtensions.Stack(System.Int64[],System.Int32[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.FloatLongArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatLongArrayManipulationExtensions.Append(System.Single[],System.Int64[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatLongArrayManipulationExtensions.Stack(System.Single[],System.Int64[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatLongArrayManipulationExtensions.Append(System.Single[],System.Int64[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatLongArrayManipulationExtensions.Stack(System.Single[],System.Int64[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.FloatFloatArray2DSimpleManipulationExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays manupulation.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatFloatArray2DSimpleManipulationExtensions.ToColumnWiseArray(System.Single[0:,0:])">
            <summary>
            Returns the matrix's elements as an vector with the data laid out column-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 4, 7, 2, 5, 8, 3, 6, 9
            7, 8, 9
            </pre></example>
            <returns>The new vector containing the matrix's elements.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatFloatArray2DSimpleManipulationExtensions.ToRowWiseArray(System.Single[0:,0:])">
            <summary>
            Returns the matrix's elements as an vector with the data laid row-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 2, 3, 4, 5, 6, 7, 8, 9
            7, 8, 9
            </pre></example>
            <returns>The new vector containing the matrix's elements.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DoubleLongArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleLongArray2DManipulationExtensions.Append(System.Double[0:,0:],System.Int64[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleLongArray2DManipulationExtensions.Append(System.Double[0:,0:],System.Int64[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleLongArray2DManipulationExtensions.Stack(System.Double[0:,0:],System.Int64[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleLongArray2DManipulationExtensions.Stack(System.Double[0:,0:],System.Int64[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.IntIntArray2DSimpleManipulationExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays manupulation.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntIntArray2DSimpleManipulationExtensions.ToColumnWiseArray(System.Int32[0:,0:])">
            <summary>
            Returns the matrix's elements as an vector with the data laid out column-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 4, 7, 2, 5, 8, 3, 6, 9
            7, 8, 9
            </pre></example>
            <returns>The new vector containing the matrix's elements.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntIntArray2DSimpleManipulationExtensions.ToRowWiseArray(System.Int32[0:,0:])">
            <summary>
            Returns the matrix's elements as an vector with the data laid row-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 2, 3, 4, 5, 6, 7, 8, 9
            7, 8, 9
            </pre></example>
            <returns>The new vector containing the matrix's elements.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.FloatDoubleArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatDoubleArrayManipulationExtensions.Append(System.Single[],System.Double[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatDoubleArrayManipulationExtensions.Stack(System.Single[],System.Double[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatDoubleArrayManipulationExtensions.Append(System.Single[],System.Double[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatDoubleArrayManipulationExtensions.Stack(System.Single[],System.Double[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DoubleFloatArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleFloatArrayManipulationExtensions.Append(System.Double[],System.Single[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleFloatArrayManipulationExtensions.Stack(System.Double[],System.Single[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleFloatArrayManipulationExtensions.Append(System.Double[],System.Single[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleFloatArrayManipulationExtensions.Stack(System.Double[],System.Single[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DoubleFloatArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleFloatArray2DManipulationExtensions.Append(System.Double[0:,0:],System.Single[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleFloatArray2DManipulationExtensions.Append(System.Double[0:,0:],System.Single[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleFloatArray2DManipulationExtensions.Stack(System.Double[0:,0:],System.Single[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleFloatArray2DManipulationExtensions.Stack(System.Double[0:,0:],System.Single[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DecimalIntArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalIntArrayManipulationExtensions.Append(System.Decimal[],System.Int32[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalIntArrayManipulationExtensions.Stack(System.Decimal[],System.Int32[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalIntArrayManipulationExtensions.Append(System.Decimal[],System.Int32[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalIntArrayManipulationExtensions.Stack(System.Decimal[],System.Int32[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Generic.Specialized.GenericArray2DFuncConversionExtensions">
            <summary>
            Provides generic extension methods for 2D arrays wich accept <see cref="T:System.Func`2"/>.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Generic.Specialized.GenericArray2DFuncConversionExtensions.ToJagged``2(``0[0:,0:],System.Func{``0,``1})">
            <summary>
            Converts matrix's elements to jagged 2D matrix with other elements.
            </summary>
            <typeparam name="T">Source type.</typeparam>
            <typeparam name="TResult">Destination type.</typeparam>
            <param name="matrix"></param>
            <param name="converter">Conversion function.</param>
            <returns>The jagged 2D matrix which stores the result of the conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Generic.Specialized.GenericArray2DFuncConversionExtensions.ToJagged``2(``0[0:,0:],System.Func{``0,System.Int32,System.Int32,``1})">
            <summary>
            Converts matrix's elements  to jagged 2D matrix with other elements.
            Second and third parameters of convertion function are outer and inner loops' indeces.
            </summary>
            <typeparam name="T">Source type.</typeparam>
            <typeparam name="TResult">Destination type.</typeparam>
            <param name="matrix"></param>
            <param name="converter">Conversion function. 
             First number - outer loop index, second - inner.
            </param>
            <returns>The jagged 2D matrix which stores the result of the conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Generic.Specialized.GenericArray2DFuncConversionExtensions.ToOther``2(``0[0:,0:],System.Func{``0,``1})">
            <summary>
            Converts matrix's elements to other using conversion function.
            </summary>
            <typeparam name="T">Source type.</typeparam>
            <typeparam name="TResult">Destination type.</typeparam>
            <param name="matrix"></param>
            <param name="converter">Conversion function.</param>
            <returns>The matrix which stores the result of the conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Generic.Specialized.GenericArray2DFuncConversionExtensions.ToOther``2(``0[0:,0:],System.Func{``0,System.Int32,System.Int32,``1})">
            <summary>
            Converts matrix's elements to other using conversion function.
            Second and third parameters of convertion function are outer and inner loops' indeces.
            </summary>
            <typeparam name="T">Source type.</typeparam>
            <typeparam name="TResult">Destination type.</typeparam>
            <param name="matrix"></param>
            <param name="converter">Conversion rule with usage of element indices. 
             First number- outer loop index, second - inner.
            </param>
            <returns>The matrix which stores the result of the conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DecimalLongArray2DOperationsExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalLongArray2DOperationsExtensions.Add(System.Decimal[0:,0:],System.Int64[0:,0:])">
            <summary>
            Adds another matrix to this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to add to this matrix.</param>
            <returns>The matrix which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalLongArray2DOperationsExtensions.Substract(System.Decimal[0:,0:],System.Int64[0:,0:])">
            <summary>
            Subtracts another matrix from this matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to subtract.</param>
            <returns>The matrix which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalLongArray2DOperationsExtensions.PointwiseMultiply(System.Decimal[0:,0:],System.Int64[0:,0:])">
            <summary>
            Pointwise multiplies this matrix with another matrix and stores the result into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="other">The matrix to pointwise multiply with this one.</param>
            <returns>The matrix which stores the result of the pointwise multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalLongArray2DOperationsExtensions.Multiply(System.Decimal[0:,0:],System.Int64[0:,0:])">
            <summary>
            Multiplies two matrices.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Matrix to multiply.</param>
            <returns>The result of multiplication.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalLongArray2DOperationsExtensions.Multiply(System.Decimal[0:,0:],System.Int64[])">
            <summary>
            Multiplies current matrix with vector.
            </summary>
            <see href="http://en.wikipedia.org/wiki/Matrix_multiplication"/>
            <param name="matrix"></param>
            <param name="other">Vector to multiply.</param>
            <returns>The new vector which contains result of multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DecimalIntArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalIntArrayOperationsExtensions.Add(System.Decimal[],System.Int32[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalIntArrayOperationsExtensions.Substract(System.Decimal[],System.Int32[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalIntArrayOperationsExtensions.PointwiseMultiply(System.Decimal[],System.Int32[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DecimalDecimalArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArrayOperationsExtensions.Add(System.Decimal[],System.Decimal[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArrayOperationsExtensions.Substract(System.Decimal[],System.Decimal[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DecimalDecimalArrayOperationsExtensions.PointwiseMultiply(System.Decimal[],System.Decimal[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.LongLongArray2DSimpleManipulationExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays manupulation.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongLongArray2DSimpleManipulationExtensions.ToColumnWiseArray(System.Int64[0:,0:])">
            <summary>
            Returns the matrix's elements as an vector with the data laid out column-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 4, 7, 2, 5, 8, 3, 6, 9
            7, 8, 9
            </pre></example>
            <returns>The new vector containing the matrix's elements.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.LongLongArray2DSimpleManipulationExtensions.ToRowWiseArray(System.Int64[0:,0:])">
            <summary>
            Returns the matrix's elements as an vector with the data laid row-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 2, 3, 4, 5, 6, 7, 8, 9
            7, 8, 9
            </pre></example>
            <returns>The new vector containing the matrix's elements.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.Generic.GenericArray2DManipulationExtensions">
            <summary>
            Provides generic extension methods for 2D arrays manipulation.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.Generic.GenericArray2DManipulationExtensions.Transpose``1(``0[0:,0:])">
            <summary>
            Returns the transpose of this matrix.
            </summary>        
            <seealso href="http://en.wikipedia.org/wiki/Transpose"/>
            <returns>The transpose of this matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Equality.GenericArray2DEqualityExtensions">
            <summary>
            Provides extension methods for numeric arrays related to equality checking.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Equality.GenericArray2DEqualityExtensions.EqualsElements``2(``0[0:,0:],``1[0:,0:])">
            <summary>
            Determines whether the specified matrix elements are 
            pairwise equal to current matrix's elements.
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="matrix"></param>
            <param name="other">The other matrix.</param>
            <returns>True, if all correspondent elements are equal;otherwise, false.</returns>
        </member>
        <member name="M:MatrixExtensions.Equality.GenericArray2DEqualityExtensions.EqualsElements``2(``0[0:,0:],``1[0:,0:],System.Func{``0,``1,System.Boolean})">
            <summary>
            Determines whether the specified matrix elements are 
            pairwise equal to current matrix's elements.
            Matrix elements considered equal if <see cref="T:System.Func`3"/>
            invocation returns true. 
            </summary>
            <typeparam name="T1"></typeparam>
            <typeparam name="T2"></typeparam>
            <param name="matrix"></param>
            <param name="other">The other matrix.</param>
            <param name="equals">The delegate which checks elements for equality.</param>
            <returns>True, if all correspondent elements are equal;otherwise, false.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Explicit.DecimalLongExplicitConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion with lost of precision or data range.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DecimalLongExplicitConversionExtensions.ToLong(System.Decimal[])">
            <summary>
            Converts vector of one numerical type to other with lost of data.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DecimalLongExplicitConversionExtensions.ToLong(System.Decimal[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other with lost of data.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.DecimalLongConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.DecimalLongConversionExtensions.ToDecimal(System.Int64[])">
            <summary>
            Converts vector of one numerical type to other.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.DecimalLongConversionExtensions.ToDecimal(System.Int64[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.LongLongArray2DSimpleOperationsExtensions">
             <summary>
            Provides extension methods for 2D numeric arrays.
             </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DSimpleOperationsExtensions.MaxPosition(System.Int64[0:,0:])">
            <summary>
            Returns the indeces of the absolute maximum element.
            </summary>
            <param name="matrix"></param>
            <returns>The array with 2 indeces of absolute maximum element.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DSimpleOperationsExtensions.Add(System.Int64[0:,0:],System.Int64)">
            <summary>
            Adds a scalar to each element in the matrix and places the results into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to add.</param>
            <returns>The matrix which stores results of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DSimpleOperationsExtensions.Substract(System.Int64[0:,0:],System.Int64)">
            <summary>
            Substracts a scalar from each element of the matrix.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to substruct.</param>
            <returns>The matrix which stores the result of the substruction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DSimpleOperationsExtensions.Negate(System.Int64[0:,0:])">
            <summary>
            Negates each element of the matrix.
            </summary>
            <returns>The new matrix which stores result of negation.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DSimpleOperationsExtensions.PointwiseMultiply(System.Int64[0:,0:],System.Int64)">
            <summary>
            Multiplies each element of this matrix with a scalar.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to multiply with.</param>
            <returns>The multiplied matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DSimpleOperationsExtensions.DivideEachElement(System.Int64[0:,0:],System.Int64)">
            <summary>
            Divides each element of current matrix by a scalar and returns the result.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to divide the matrix by.</param>
            <returns>The matrix with result of the division.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DSimpleOperationsExtensions.SumPerColumn(System.Int64[0:,0:])">
            <summary>
            Finds sum of all elemtens in each matrix column.
            </summary>
            <param name="matrix"></param>
            <returns>The vector which contains sums.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.LongLongArray2DSimpleOperationsExtensions.SumPerRow(System.Int64[0:,0:])">
            <summary>
            Finds sum of all elemtens in each matrix row.
            </summary>
            <param name="matrix"></param>
            <returns>The vector which contains sums.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.IntIntArray2DSimpleOperationsExtensions">
             <summary>
            Provides extension methods for 2D numeric arrays.
             </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DSimpleOperationsExtensions.MaxPosition(System.Int32[0:,0:])">
            <summary>
            Returns the indeces of the absolute maximum element.
            </summary>
            <param name="matrix"></param>
            <returns>The array with 2 indeces of absolute maximum element.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DSimpleOperationsExtensions.Add(System.Int32[0:,0:],System.Int32)">
            <summary>
            Adds a scalar to each element in the matrix and places the results into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to add.</param>
            <returns>The matrix which stores results of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DSimpleOperationsExtensions.Substract(System.Int32[0:,0:],System.Int32)">
            <summary>
            Substracts a scalar from each element of the matrix.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to substruct.</param>
            <returns>The matrix which stores the result of the substruction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DSimpleOperationsExtensions.Negate(System.Int32[0:,0:])">
            <summary>
            Negates each element of the matrix.
            </summary>
            <returns>The new matrix which stores result of negation.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DSimpleOperationsExtensions.PointwiseMultiply(System.Int32[0:,0:],System.Int32)">
            <summary>
            Multiplies each element of this matrix with a scalar.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to multiply with.</param>
            <returns>The multiplied matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DSimpleOperationsExtensions.DivideEachElement(System.Int32[0:,0:],System.Int32)">
            <summary>
            Divides each element of current matrix by a scalar and returns the result.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to divide the matrix by.</param>
            <returns>The matrix with result of the division.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DSimpleOperationsExtensions.SumPerColumn(System.Int32[0:,0:])">
            <summary>
            Finds sum of all elemtens in each matrix column.
            </summary>
            <param name="matrix"></param>
            <returns>The vector which contains sums.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.IntIntArray2DSimpleOperationsExtensions.SumPerRow(System.Int32[0:,0:])">
            <summary>
            Finds sum of all elemtens in each matrix row.
            </summary>
            <param name="matrix"></param>
            <returns>The vector which contains sums.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.FloatIntArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatIntArrayOperationsExtensions.Add(System.Single[],System.Int32[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatIntArrayOperationsExtensions.Substract(System.Single[],System.Int32[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatIntArrayOperationsExtensions.PointwiseMultiply(System.Single[],System.Int32[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.IntFloatArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntFloatArrayManipulationExtensions.Append(System.Int32[],System.Single[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntFloatArrayManipulationExtensions.Stack(System.Int32[],System.Single[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntFloatArrayManipulationExtensions.Append(System.Int32[],System.Single[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntFloatArrayManipulationExtensions.Stack(System.Int32[],System.Single[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.FloatLongArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatLongArray2DManipulationExtensions.Append(System.Single[0:,0:],System.Int64[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatLongArray2DManipulationExtensions.Append(System.Single[0:,0:],System.Int64[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatLongArray2DManipulationExtensions.Stack(System.Single[0:,0:],System.Int64[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatLongArray2DManipulationExtensions.Stack(System.Single[0:,0:],System.Int64[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.FloatIntArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatIntArrayManipulationExtensions.Append(System.Single[],System.Int32[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatIntArrayManipulationExtensions.Stack(System.Single[],System.Int32[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatIntArrayManipulationExtensions.Append(System.Single[],System.Int32[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatIntArrayManipulationExtensions.Stack(System.Single[],System.Int32[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.FloatFloatArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatFloatArrayManipulationExtensions.Append(System.Single[],System.Single[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatFloatArrayManipulationExtensions.Stack(System.Single[],System.Single[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatFloatArrayManipulationExtensions.Append(System.Single[],System.Single[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.FloatFloatArrayManipulationExtensions.Stack(System.Single[],System.Single[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Explicit.DoubleIntExplicitConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion with lost of precision or data range.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DoubleIntExplicitConversionExtensions.ToInt(System.Double[])">
            <summary>
            Converts vector of one numerical type to other with lost of data.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DoubleIntExplicitConversionExtensions.ToInt(System.Double[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other with lost of data.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.FloatFloatArray2DSimpleOperationsExtensions">
             <summary>
            Provides extension methods for 2D numeric arrays.
             </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DSimpleOperationsExtensions.MaxPosition(System.Single[0:,0:])">
            <summary>
            Returns the indeces of the absolute maximum element.
            </summary>
            <param name="matrix"></param>
            <returns>The array with 2 indeces of absolute maximum element.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DSimpleOperationsExtensions.Add(System.Single[0:,0:],System.Single)">
            <summary>
            Adds a scalar to each element in the matrix and places the results into new matrix.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to add.</param>
            <returns>The matrix which stores results of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DSimpleOperationsExtensions.Substract(System.Single[0:,0:],System.Single)">
            <summary>
            Substracts a scalar from each element of the matrix.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to substruct.</param>
            <returns>The matrix which stores the result of the substruction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DSimpleOperationsExtensions.Negate(System.Single[0:,0:])">
            <summary>
            Negates each element of the matrix.
            </summary>
            <returns>The new matrix which stores result of negation.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DSimpleOperationsExtensions.PointwiseMultiply(System.Single[0:,0:],System.Single)">
            <summary>
            Multiplies each element of this matrix with a scalar.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to multiply with.</param>
            <returns>The multiplied matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DSimpleOperationsExtensions.DivideEachElement(System.Single[0:,0:],System.Single)">
            <summary>
            Divides each element of current matrix by a scalar and returns the result.
            </summary>
            <param name="matrix"></param>
            <param name="scalar">The scalar to divide the matrix by.</param>
            <returns>The matrix with result of the division.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DSimpleOperationsExtensions.SumPerColumn(System.Single[0:,0:])">
            <summary>
            Finds sum of all elemtens in each matrix column.
            </summary>
            <param name="matrix"></param>
            <returns>The vector which contains sums.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArray2DSimpleOperationsExtensions.SumPerRow(System.Single[0:,0:])">
            <summary>
            Finds sum of all elemtens in each matrix row.
            </summary>
            <param name="matrix"></param>
            <returns>The vector which contains sums.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.IntLongArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntLongArrayManipulationExtensions.Append(System.Int32[],System.Int64[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntLongArrayManipulationExtensions.Stack(System.Int32[],System.Int64[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntLongArrayManipulationExtensions.Append(System.Int32[],System.Int64[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.IntLongArrayManipulationExtensions.Stack(System.Int32[],System.Int64[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DoubleIntArray2DManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 2D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleIntArray2DManipulationExtensions.Append(System.Double[0:,0:],System.Int32[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1, 2,
            3, 4,                1, 2, 5
            append      we get   3, 4, 6
            5
            6
            </pre></example>
            <param name="matrix"></param>
            <param name="right">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleIntArray2DManipulationExtensions.Append(System.Double[0:,0:],System.Int32[0:,0:])">
             <summary>
             Concatenates current matrix with the given matrix and places the result into the result matrix.
              </summary>
            <example><pre>
             1, 2
             3, 4            1, 2, 5, 6
             append   we get 3, 4, 7, 8
             5, 6
             7, 8
             </pre></example>
             <param name="matrix"></param>
             <param name="right">The matrix to concatenate.</param>
             <returns>The new combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleIntArray2DManipulationExtensions.Stack(System.Double[0:,0:],System.Int32[])">
            <summary>
            Concatenates current matrix with the given vector and places the result into the result matrix.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The vector to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleIntArray2DManipulationExtensions.Stack(System.Double[0:,0:],System.Int32[0:,0:])">
            <summary>
            Concatenates current matrix with the given matrix and places the result into the result matrix.
             </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6           1, 2, 3
            stack     we get  4, 5, 6
            7, 8, 9           7, 8, 9
            2, 5, 2           2, 5, 2
            </pre></example>
            <param name="matrix"></param>
            <param name="bottom">The matrix to concatenate.</param>
            <returns>The combined matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DecimalLongArrayManipulationExtensions">
            <summary>
            Provides extension methods for concatenation of 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalLongArrayManipulationExtensions.Append(System.Decimal[],System.Int64[])">
            <summary>
            Appends to rigth the other to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2
            append       we get 1, 2, 7, 8, 9
            7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new longer vector.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalLongArrayManipulationExtensions.Stack(System.Decimal[],System.Int64[])">
            <summary>
            Stacks to bottom the new vector to current.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2  3
            stack         we get      1, 2, 3
            7, 8, 9                   7, 8, 9
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix with 2 rows.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalLongArrayManipulationExtensions.Append(System.Decimal[],System.Int64[0:,0:])">
            <summary>
            Appends to rigth the matrix to current vector.
            Vector considered to be a column.
            </summary>
            <example><pre>
            1
            2
            append          we get 1, 3, 4, 5
            3, 4, 5                2, 6, 7, 8
            6, 7, 8
            </pre></example>
            <param name="vector"></param>
            <param name="right"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DecimalLongArrayManipulationExtensions.Stack(System.Decimal[],System.Int64[0:,0:])">
            <summary>
            Stacks to bottom the matrix to current vector.
            Vector considered to be a row.
            </summary>
            <example><pre>
            1, 2, 3                 1, 2, 3              
            append          we get  4, 5, 6
            4, 5, 6                 7, 8, 9
            7, 8, 9             
            </pre></example>
            <param name="vector"></param>
            <param name="bottom"></param>
            <returns>The new matrix.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.FloatFloatArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArrayOperationsExtensions.Add(System.Single[],System.Single[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArrayOperationsExtensions.Substract(System.Single[],System.Single[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.FloatFloatArrayOperationsExtensions.PointwiseMultiply(System.Single[],System.Single[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DoubleIntArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleIntArrayOperationsExtensions.Add(System.Double[],System.Int32[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleIntArrayOperationsExtensions.Substract(System.Double[],System.Int32[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleIntArrayOperationsExtensions.PointwiseMultiply(System.Double[],System.Int32[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Operations.DoubleFloatArrayOperationsExtensions">
            <summary>
            Provides extension methods for 1D numeric arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArrayOperationsExtensions.Add(System.Double[],System.Single[])">
            <summary>
            Adds another vector to this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to add to this one.</param>
            <returns>The vector which stores the result of the addition.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArrayOperationsExtensions.Substract(System.Double[],System.Single[])">
            <summary>
            Subtracts another vector from this vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to subtract from this one.</param>
            <returns>The vector which stores the result of the substraction.</returns>
        </member>
        <member name="M:MatrixExtensions.Operations.DoubleFloatArrayOperationsExtensions.PointwiseMultiply(System.Double[],System.Single[])">
            <summary>
            Pointwise multiplies this vector with another vector and stores the result into the result vector.
            </summary>
            <param name="vector"></param>
            <param name="other">The vector to pointwise multiply with this one.</param>
            <returns>The vector which stores the result of the  pointwise multiplication.</returns>
        </member>
        <member name="T:MatrixExtensions.Manipulation.DoubleDoubleArray2DSimpleManipulationExtensions">
            <summary>
            Provides extension methods for 2D numeric arrays manupulation.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleDoubleArray2DSimpleManipulationExtensions.ToColumnWiseArray(System.Double[0:,0:])">
            <summary>
            Returns the matrix's elements as an vector with the data laid out column-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 4, 7, 2, 5, 8, 3, 6, 9
            7, 8, 9
            </pre></example>
            <returns>The new vector containing the matrix's elements.</returns>
        </member>
        <member name="M:MatrixExtensions.Manipulation.DoubleDoubleArray2DSimpleManipulationExtensions.ToRowWiseArray(System.Double[0:,0:])">
            <summary>
            Returns the matrix's elements as an vector with the data laid row-wise.
            </summary>
            <example><pre>
            1, 2, 3
            4, 5, 6  will be returned as  1, 2, 3, 4, 5, 6, 7, 8, 9
            7, 8, 9
            </pre></example>
            <returns>The new vector containing the matrix's elements.</returns>
        </member>
        <member name="T:MatrixExtensions.Generic.GenericArrayExtensions">
            <summary>
            Provides generic extension methods for 1D arrays.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Generic.GenericArrayExtensions.IsEmpty``1(``0[])">
            <summary>
            Returns true if vector contains no elements.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="vector"></param>
            <returns>True, if number of elements equals 0; otherwise, false.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.FloatLongConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.FloatLongConversionExtensions.ToFloat(System.Int64[])">
            <summary>
            Converts vector of one numerical type to other.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.FloatLongConversionExtensions.ToFloat(System.Int64[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Conversion.Explicit.DecimalDoubleExplicitConversionExtensions">
            <summary>
            Provides extension methods for numeric arrays conversion with lost of precision or data range.
            </summary>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DecimalDoubleExplicitConversionExtensions.ToDouble(System.Decimal[])">
            <summary>
            Converts vector of one numerical type to other with lost of data.
            </summary>
            <param name="vector"></param>
            <returns>The vector containing result of conversion.</returns>
        </member>
        <member name="M:MatrixExtensions.Conversion.Explicit.DecimalDoubleExplicitConversionExtensions.ToDouble(System.Decimal[0:,0:])">
            <summary>
            Converts matrix of one numerical type to other with lost of data.
            </summary>
            <param name="matrix"></param>
            <returns>The matrix containing result of conversion.</returns>
        </member>
        <member name="T:MatrixExtensions.Boolean.BooleanArrayExtensions">
             <summary>
            Provides extension methods for boolean arrays.
             </summary>
        </member>
        <member name="M:MatrixExtensions.Boolean.BooleanArrayExtensions.ToInt(System.Boolean[])">
            <summary>
            Transfoms <see cref="T:System.Array"/> of <see cref="T:System.Boolean"/> to 
            <see cref="T:System.Array"/> of <see cref="T:System.Int32"/>.
            False to 0, true to 1.
            </summary>
            <param name="vector"></param>
            <returns></returns>
        </member>
    </members>
</doc>
